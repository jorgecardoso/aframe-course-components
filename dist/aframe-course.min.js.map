{"version":3,"file":"aframe-course.min.js","mappings":"CAAA,SAA2CA,EAAMC,GAChD,GAAsB,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,SACb,GAAqB,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,OACP,CACJ,IAAIK,EAAIL,IACR,IAAI,IAAIM,KAAKD,GAAuB,iBAAZJ,QAAuBA,QAAUF,GAAMO,GAAKD,EAAEC,EACvE,CACA,CATD,CASGC,MAAM,KACT,O,iBCVA,EAAQ,I,UCKR,IAAIC,EAAcC,OAAOC,MAAMF,YAuD/B,GAAsB,oBAAXC,OACT,MAAM,IAAIE,MAAM,gEAGlBT,EAAOD,QAAWQ,OAAOG,kBAAkB,YAAa,CACtDC,OAAQ,CACNC,QAAS,GACTC,MAAO,SAAUC,GACbC,QAAQC,IAAI,UAAWF,GACvB,IAAIG,EA7CK,SAAoBH,GAEnC,SAASI,EAAcC,GACrB,MAAO,IAAMA,EAAI,GAAGC,aACtB,CAMA,IAEIC,EACAC,EACAC,EACAC,EALAC,EAAOlB,OAAOC,MAAMF,YAAYO,MAAMC,GAQ1C,IAAKO,KAAOI,EACVH,EAAYD,EAAIK,MAAM,KAAK,GAC3BH,EAAYF,EAAIK,MAAM,KAAKC,MAAM,GAAGC,KAAK,KAErCN,KADJE,EAA8BF,EAdnBO,QAAQ,WAAYX,KAmB3BX,OAAOuB,WAAWN,KAAmBjB,OAAOuB,WAAWR,KAEzDG,EADUD,EAAcO,OAAO,IAAKR,IACpBE,EAAKJ,UACdI,EAAKJ,IAIhB,OAAOI,CACT,CAWgBO,CAAWlB,GAErB,OADEC,QAAQC,IAAI,WAAYC,GACnBA,CACT,EACAgB,UAAW,SAAUR,GAEnB,OADEV,QAAQC,IAAI,cAAcS,GACrBnB,EAAY2B,UAAUR,EAC/B,GAGFS,UAAU,EAEVC,KAAM,WACJC,KAAKC,aAAe,KACpBD,KAAKE,UAAY,IACnB,EAEAC,OAAQ,SAAUC,GAChBJ,KAAKK,sBACLL,KAAKM,sBACLN,KAAKO,kBACP,EAEAC,MAAO,WACLR,KAAKK,qBACP,EAEAI,KAAM,WACJT,KAAKO,kBACP,EAMAD,oBAAqB,WACnB,IAEII,EACAC,EACAC,EAJAvB,EAAOW,KAAKX,KACZwB,EAAKb,KAAKa,GAMdH,EAAQrB,EAAKyB,QAAUd,KAAKe,GAC5BJ,EAAStB,EAAK2B,QAGdJ,EAAWD,EAASE,EAAGI,QAAQC,cAAcP,GAAUE,EAEvDb,KAAKE,UAAYQ,EAEjB,MAAMS,EAAU,KACd,IAAIC,EAEJ,IAAKA,KAAY/B,EACE,WAAb+B,GAAsC,YAAbA,GAC7BjD,OAAOC,MAAMiD,OAAOC,qBAAqBC,KAAKvB,KAAMY,EAAUQ,EAChB/B,EAAK+B,GACrD,EAGGI,MAAMnC,EAAKoC,QAIdzB,KAAKC,aAAekB,EAFpBnB,KAAKC,aAAe,KAAQyB,WAAWP,EAASQ,WAAWtC,EAAKoC,QAAQ,CAI5E,EAEAlB,iBAAkB,WAChBP,KAAKa,GAAGN,iBAAiBP,KAAKE,UAAWF,KAAKC,aAChD,EAEAI,oBAAqB,WACnBL,KAAKa,GAAGR,oBAAoBL,KAAKE,UAAWF,KAAKC,aACnD,G,GC/IE2B,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAapE,QAGrB,IAAIC,EAASgE,EAAyBE,GAAY,CAGjDnE,QAAS,CAAC,GAOX,OAHAsE,EAAoBH,GAAUlE,EAAQA,EAAOD,QAASkE,GAG/CjE,EAAOD,OACf,CCtBA,CAAQ,K,SDCJiE,C","sources":["webpack://aframe-course-components/webpack/universalModuleDefinition","webpack://aframe-course-components/./src/interaction/index.js","webpack://aframe-course-components/./src/interaction/new-event-set.js","webpack://aframe-course-components/webpack/bootstrap","webpack://aframe-course-components/./index.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, () => {\nreturn ","require('./new-event-set');\r\n","const EPS = 0.1;\r\n\r\n\r\n\r\n\r\nvar styleParser = AFRAME.utils.styleParser;\r\n\r\n/* global AFRAME */\r\n// AFRAME styleParse has one issue: it transforms hyphenated keys to camel-case.\r\n// This is a problem when those keys are component names, as A-Frame component\r\n// names often include hyphens, and are not converted internally to camel case.\r\n\r\n// To compensate for this, we post-process the data from the parser:\r\n// - analyze the first part of the string, represeting the component\r\n// - if translating this out of camel case to a dashed value gives\r\n//   a better match against known A-Frame components, then use the dashed value\r\n//   for the component name.\r\n\r\n// This solution is not 100% robust, but good enough for most circumstances.\r\n// - Will not handle component names that have a mix of camel case and dashes\r\n//   e.g. example-componentOne\r\n// - Could give incorrect results in case where two components have names that\r\n//   only differ by their casing.\r\n//   e.g. example-component-two & exampleComponentTwo\r\nvar styleParse = function styleParse(value) {\r\n\r\n  function dashLowerCase(str) {\r\n    return '-' + str[0].toLowerCase();\r\n  }\r\n\r\n  function fromCamelCase(str) {\r\n    return str.replace(/([A-Z])/g, dashLowerCase);\r\n  }\r\n\r\n  var data = AFRAME.utils.styleParser.parse(value);\r\n\r\n  var key;\r\n  var component;\r\n  var remainder;\r\n  var dashComponent;\r\n  var dashKey;\r\n\r\n  for (key in data) {\r\n    component = key.split('.')[0];\r\n    remainder = key.split('.').slice(1).join('.');\r\n    dashComponent = fromCamelCase(component);\r\n    if (component === dashComponent) {\r\n      continue;\r\n    }\r\n\r\n    if (AFRAME.components[dashComponent] && !AFRAME.components[component]) {\r\n      dashKey = dashComponent.concat('.', remainder);\r\n      data[dashKey] = data[key];\r\n      delete data[key];\r\n    }\r\n  }\r\n\r\n  return data;\r\n};\r\n\r\nif (typeof AFRAME === 'undefined') {\r\n  throw new Error('Component attempted to register before AFRAME was available.');\r\n}\r\n\r\nmodule.exports =  AFRAME.registerComponent('event-set', {\r\n  schema: {\r\n    default: '',\r\n    parse: function (value) {\r\n        console.log(\"value: \", value);\r\n        let r = styleParse(value);\r\n        console.log(\"parsed: \", r)\r\n      return r;\r\n    },\r\n    stringify: function (data) {\r\n        console.log(\"stringify: \",data);\r\n      return styleParser.stringify(data);\r\n    },\r\n  },\r\n\r\n  multiple: true,\r\n\r\n  init: function () {\r\n    this.eventHandler = null;\r\n    this.eventName = null;\r\n  },\r\n\r\n  update: function (oldData) {\r\n    this.removeEventListener();\r\n    this.updateEventListener();\r\n    this.addEventListener();\r\n  },\r\n\r\n  pause: function () {\r\n    this.removeEventListener();\r\n  },\r\n\r\n  play: function () {\r\n    this.addEventListener();\r\n  },\r\n\r\n  /**\r\n   * Update source-of-truth event listener registry.\r\n   * Does not actually attach event listeners yet.\r\n   */\r\n  updateEventListener: function () {\r\n    var data = this.data;\r\n    var el = this.el;\r\n    var event;\r\n    var target;\r\n    var targetEl;\r\n\r\n    // Set event listener using `_event`.\r\n    event = data._event || this.id;\r\n    target = data._target;\r\n\r\n    // Decide the target to `setAttribute` on.\r\n    targetEl = target ? el.sceneEl.querySelector(target) : el;\r\n\r\n    this.eventName = event;\r\n\r\n    const handler = () => {\r\n      var propName;\r\n      // Set attributes.\r\n      for (propName in data) {\r\n        if (propName === '_event' || propName === '_target') { continue; }\r\n        AFRAME.utils.entity.setComponentProperty.call(this, targetEl, propName,\r\n                                                      data[propName]);\r\n      }\r\n    };\r\n\r\n    if (!isNaN(data._delay)) {\r\n      // Delay.\r\n      this.eventHandler = () => { setTimeout(handler, parseFloat(data._delay)); };\r\n    } else {\r\n      this.eventHandler = handler;\r\n    }\r\n  },\r\n\r\n  addEventListener: function () {\r\n    this.el.addEventListener(this.eventName, this.eventHandler);\r\n  },\r\n\r\n  removeEventListener: function () {\r\n    this.el.removeEventListener(this.eventName, this.eventHandler);\r\n  }\r\n});","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","require('./src/interaction');\r\n/*require('./src/loaders');\r\nrequire('./src/misc');\r\nrequire('./src/pathfinding');\r\nrequire('./src/primitives');\r\n*/"],"names":["root","factory","exports","module","define","amd","a","i","self","styleParser","AFRAME","utils","Error","registerComponent","schema","default","parse","value","console","log","r","dashLowerCase","str","toLowerCase","key","component","remainder","dashComponent","data","split","slice","join","replace","components","concat","styleParse","stringify","multiple","init","this","eventHandler","eventName","update","oldData","removeEventListener","updateEventListener","addEventListener","pause","play","event","target","targetEl","el","_event","id","_target","sceneEl","querySelector","handler","propName","entity","setComponentProperty","call","isNaN","_delay","setTimeout","parseFloat","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"sourceRoot":""}